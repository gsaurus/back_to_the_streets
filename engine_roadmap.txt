Engine documentation:
https://docs.google.com/document/d/1YAtgp1-7RQTSQqmVyXsWawJDXM8KLNKdgQm-GsvNzPs/

*** Storage Entity Data Format ***
OK - define storage format 1
OK - code storage format 1
OK - refactor projects names 0.5
OK - create basic documentation about the projects 0.5
OK - refactor game format (currently transitions and events are different things, need to be the same) 2
OK - game read basic condition/events from storage format (no plugin yet) 2
OK - define the editor screens layout and functionality.. 3
OK - define editor character format 1
OK - editor read/write from/to storage format 2


*** Editor Basics ***
OK - study Unity UI stuff, do some experiments.. 2
OK - implement list prefab in Unity 1
OK - able to load in a 2D or 3D model, I have done a few work in the past, so 15% done.. 3
OK - Create the basic UI layouts, and basic navigation 8
OK - Associate the model to a stub character data 3
OK - scroll between animations, playback features (play, pause, next frame, etc) 5
OK - Code basic functionality such as load, save 3
-- - do some experiments with plugins.. the editor will need plugins to add functionality on the fly 2
OK - Collision boxes 3
OK - Hit boxes (basic stuff only) 3
OK - Direct events (stub stuff only) 2
OK - Conditional events (stub stuff only) 3

-- - Import collision & hit boxes
-- - Define and visualize models over anchors (new panel most likely)

- Automated script to create and copy AssetBundles into character-editor 1
- Browse and load asset bundles from a folder near the editor executable file 2 --> err, no executable due to Unity limitation

- check what's going on with some comboboxes not scrolling (temp solution: use keyboard up/down & space)
- Use tab/enter to move to next inputField

OK - support offline mode 2
TODO: investigate double messages on single key event?.. 1
TODO: investigate is not valid. Input position is { NaN, NaN, NaN }, think reason is something's wrong with the 3D model, perhaps the anchor points exporting


*** Game Entity Setup Basics ***
OK - load character data and model 1
OK - construct character controller (basic stuff only) 2
OK - Create frame conditions (at frame x, do something) 2
OK - Create animation transition events for editor (at frame x, move to animation y) 2
OK - Load and play animation transitions in-game 2
OK - Input conditions, Velocity events, Velocity conditions, etc (check old GameEntityController) 5
OK - Create a test character with simple movement: walk, jump, fall 3
By now, in-game character should be able to walk, jump, fall.
Basic stuff is done.

[[[[[[[[[

TODO: need to detail next things:

Next will be:
- Attack, collision & hits, energy, death (both game code, and editor code)
- Grab and release objects in anchor points

Because I'm lazy, polish comes last, or when I get bored! This is relatively simple but low priority:
- Editor camera: scroll, pan, zoom
- View anchored objects in editor

Much more in the future comes the game stuff itself:
- VS mode is the simplest, we start from here
- Simple menus and whatever
Other plans:
- enemies, AI scripts
- special backup calls (if everything goes well, this should be easy, I may do some experiments when bored)
- do an actual beat'em up level


]]]]]]]]]





Log

13-02-16
	- Schematic definition of character storage definition
	- Update project with latest changes from tanks & ski prototypes
	- Automatically connect to server (whatever, will be modified later anyway)
	- Investigated why not building to webGL. Reason: limited network support. Would have to refactor all network for that.
14-02-16
	- Code storage model
	- Refactor projects names
15-02-16
	- Investigate a Mac build problem
	- Added missing C# projects to git
	- Documentation: Basic projects overview
16-02-16
	- Refactor animations transitions and events (now only events and conditions)
17-02-16
	- Fixed Mac build scripts (working again)
	- Preliminar code to setup of a character from storage data
18-02-16
	- Initial thinking on editor layouts
	- Initial experiments with Unity UI
	- Figured can make a selection list using a ToggleGroup
19-02-16
	- Planned basic editor layout
20-02-16
	- Defined editor character model
21-02-16
	- Save/Load character data on editor (compiling, untested)
	- Initial rough code for character edition (selecting elements)
	- Implemented UI single selection list
22-02-16
	- AssetBundles - Wasted 2:30h: Unity using old cached bundle instead of new one
	- Asset bundles working between asset-packer and character-editor
	- Layout for bundle-model (skin) selectiono s
23-02-16
	- Layout for open/new character
	- Layout to select anchor nodes
24-02-16
	- Layout for events editor
25-02-16
	- Layout for collisions panel
26-02-16
	- Layout for hits panel (attack)
	- Layout for events
	- Layout for attachment tests (stub)
	- Layout for animation playback
27-02-16
	- Layout for all events management
	- CharacterEditor: events centralisation, load / save / create character, load skin
	- Coded most of Open / Create character panel
28-02-16
	- Coded skins selector panel
	- Coded Character panel
	- Coded Anchors panel
29-02-16
	- Added save / open buttons
	- Added animations dropdown to navigate through animations
01-03-16
	- Fixed animation durations
02-03-16
	- Bugfixing (problems related with loading different chars, events order, etc)
03-03-16
	- Coded Box sub panel
	- Started coding Collisions panel
04-03-16
	- Collisions panel finished
	- Copy box from one frame into others
05-03-16
	- Collision and Hit boxes visualisation
	- Coded HitBoxes, except type & parameter
06-03-16
	- Created generic param UI prefabs
	- Hits generic parameters fully functional
	- Rearranged hit panel elements, more crowded but less confusing
	- Coded Events Panel
	- Coded Events Editor
	- Started All Events panel
07-03-16
	- Completed All Events panel
08-03-16
	- Prepared model with boxes for auto-import
09-03-16
	- Coded good part of auto-import, then decided to take it off
	- Simplified open panel, no more auto-import
	- Decided to not include attachments on this phase (they won't be exported with the prefabs)
10-03-16
	- Studied UFE (Universal Fighting Engine)
	- Started defining basic conditions and it's loading from the storage data
11-03-16
	- Game: All basic conditions and events
	- Editor: All basic conditions
	- Editor: All basic events
12-03-16
	- Able to load character in game
	- All conditions and events working in-game
13-03-16
	- Fixed demo character to make sure there was no bugs with the events system
14-03-16
	- Checked old prototype to have an idea about hits
	- Rough plan for the next works
15-03-16
	- PointModel with flag to enable / disable physics calculations
16..20-03-16
	:( no work done :(
21-03-16
	- Load "frame data" from storage (collision and hits, not storing it on controller yet)
22..24-03-16
	:( no work done :(
25-03-16
	- Support offline mode
26-03-16
	- Hit/Collision detection
27-03-16
	- Hit once per animation
	- Hit/Hurt conditions/events
	- Combo counter & timer
28-03-16
	- Initial code for anchoring (grab, release, manipulation), not working yet
29-03-16
	:( no work done :(
30-03-16
	- Anchored entity's relative position to parent
	- Use anchored relative position for hits/collision checks
	- Force anchored entity animation
31-03..01-04-16
	:( no work done :(
02-04-16
	- Conditions for anchoring system (game)
03-04-16
	- Split entity controller into more files (roughly)
	- Anchored conditions & events (editor & game)
	- Grab/release working in-game (no views yet)
04..08-04-16
	:( no work done :(
09-04-16
	- Plan next steps
10-04-16
	- Fixed network connection issues
	- Turned off events anti-hacking on Debug to allow to test in same machine
	- Fixed null pointers on model's anchoredEntities list
	- Set hits matrix all VS all to better test with current teams distribution
11-04-16
	:( no work done :(
12-04-16
	- Store anchor obj references at the objects pool
	- Entity View as child of parent's anchor
13-04-16
	- Test release position off the walls
	- Apply impulse to referenced entity
	- Reset X/Z impulse
14..17-04-16
	:( no work done :(
18-04-16
	- Import and cleanup Axel sprites from older prototype
19..22-04-16
	:( no work done :(
23-04-16
	- Added Axel art from Rui LuÃ­s
	- Added vertical impulse condition
	- Added Input clear events
24-04-16
	- Removed shooter stuff
	- Entity & Point 2D views
	- Added background
25-04-16
	- Planes from quads
	- Small tweaks on Physics (beware of coordinates > 300 or < -300)
26-04-16
	- Hardcoded camera tracking (will do until beat'em up camera support)
27-04-16
	- Network player data containing selected character
	- Z order in discrete "layers" to avoid character layers overlapping



************************
**** Next days plan ****
************************


OK - Add background, and hardcoded scene planes
OK - Rotate views (see prototype to have an idea on the angle)
OK - Decent 2D Camera control
04 - Simple character select menu: checkboxes group + start button
05 - Fetch servers in "background", join one or create new
06 - Basic transition into game: fade black in, placeholder text, fade black out
07 - Start button start transition and set player ready
08 - Start offline mode while waiting for matchmaking
08 - Someone joined: basic transition, start game; if midle transition, smooth it
09 - 


TODO: decently refactor WorldController (or plan refactor)

TODO:
 - Deal with server death while not ready: try to connect to other server
 - Deal with client / server death while in-game: victory?..
TODO: Polish:
 - WorldView for quakes, etc


*** Pipeline ***
01 - no longer streaming assets on the game end
02 - scripts to copy bundles around



*** Entity View ***
01 - Fix sometimes animations not playing


*** Hits / Collisions ***
OK - PointModel with flag to enable / disable physics calculations (to disable during hit pause)	1
OK - Precompute collisions bounding boxes 1
OK - Precompute hits bounding boxes 1
OK - Define teams of entities (buckets), and their kind of interaction ([x]hit, [x]collision) to check collisions between relevant teams only 2
OK - Hits detection: loop through the teams to detect hit VS collision (Debug.Log will do for now) 3
OK - Basic hit/hurt conditions 1
OK - Animation pause delay (built-in support) 1
-- - General variable arrays (precomputed size), and automatic countdown counters array (to be used as energy, combo counter & timers, etc) 1
-- - Conditions & events for general variables 3
OK - Test character with simple combo and combo time cancel 2
OK - Which collision box (ID) was I hit at?
OK - One hit per animation (no multihit, thank you)
13 - Hit with projection (velocity) data
14 - Apply projection (velocity) on hurt
15 - Hits matrix as numbers, for % of damage (support for friendly damage causing less damage)



*** Grabs ***	
OK - Store anchor obj references at the objects pool
OK - Entity View as child of parent's anchor
3 - Improve position interpolation when dragging to a close position
OK - Apply impulse to grabbed entity
OK - Reset X,Z impulse
OK - Test release position off the walls
7 - Editor: select an anchor ID to force position from model view anchor transform 


*** Discriminating objects (e.g. pipe, knife different weapons) ***
1 - Condition to get entity name (hitten entity, grabbed entity, etc)


*** Energy, Death ***
1 - Entity energy data (counter?)
2 - Hits damage
3 - Apply damage on hurt
4 - Apply sporadic damage (Event) (e.g. using special damage(x))
5 - Condition: energy checker
6 - Kill entity

(Note: rage meter and such should be custom counters in entity!)

*** HUD support ***
(Note: only variables that are traversal to levels, not coupled to entity instances)
1 - HUD Model (player center, whatever) with counters (score, lives?, cop calls..)
2 - Entities with a ref to HUD ModelID, HUD Model with ref to entity, and grabbed/hitten/closest entity?
3 - HUD Controller with methods to add/subtract counters
4 - Simple experimental view


*** Proximity Queries (e.g. to pick weapon from the floor) ***
1 - Method to find closest entity of certain team, meeting certain conditions (e.g. landed, dangerous, anyState..)
2 - Buffer latest proximity queries for next X frames
3 - Include closest entity on conditions / events
4 - Condition: closest entity distance (negative if from behind)
(Note for game: only check for proximity if switching direction, so if moving forward do not start moving backwards)


*** Main Menu ***
1 - Add intro placeholder
2 - Add main-menu placeholder with Versus Mode
3 - Add Character select placeholder, by selecting Versus, include a game password option
4 - Add an offline mode placeholder
5 - Add a challenger entry placeholder
6 - Start versus mode placeholder from offline
7 - Spawn each player in different teams and different positions


*** Fighting elements ***
1 - Face to entity event (such as face to closest enemy)
2 - Add mass to entity, for collision VS collision who push who
3 - Collision VS Collision physics 3
4 - Collision VS Collision events


*** Main Polish ***
1 - Add final intro
2 - Animate menus and their transitions
3 - Animate character select
4 - Compound offline train mode (background)
5 - Create offline train stub entity (barrels?, bags?)
6 - Compound Versus background and physics
7 - Animate challenger (offline to versus transition)
8 - Versus mode camera
9 - Train mode camera
10 - Versus mode HUD
11 - Train mode HUD	


*** Camera Controll events ***
1 - Event to set all other entities of a team at a certain animation
2 - Event to take camera control into an anchor (release anchor releases the camera)
3 - Event to set animation and physics multiplier to all other entities of a team
4 - Experiments

*** Network ***
TODO: what's wrong sometimes opponent not created?...
	
OK - separate Entity conditions / events by static classes for each concept

TODO: Editor: add txt "guides", for variable "names" etc

TODO: animation time multiplier: in the same update run more than one frame, it's conditions and events
TODO: physics multiplier


********** BEAT'EM UP **********

TODO: "Reset" coordinates on each scene area, to avoid physics errors with coordinates > 300