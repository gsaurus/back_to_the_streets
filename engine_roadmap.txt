Engine documentation:
https://docs.google.com/document/d/1YAtgp1-7RQTSQqmVyXsWawJDXM8KLNKdgQm-GsvNzPs/

massive work ahead, the storage format for the characters is one, the format in the editor is other, and the in-game format is other, and I have to:
OK - define storage format 1
OK - code storage format 1
OK - refactor projects names 0.5
OK - create basic documentation about the projects 0.5
OK - refactor game format (currently transitions and events are different things, need to be the same) 2
OK - game read basic condition/events from storage format (no plugin yet) 2
OK - define the editor screens layout and functionality.. 3
OK - define editor character format 1
OK - editor read/write from/to storage format 2


Then start with the editor..
1 - study Unity UI stuff, do some experiments.. 2
OK - implement list prefab in Unity 1
OK - able to load in a 2D or 3D model, I have done a few work in the past, so 15% done.. 3
4 - Create the basic UI layouts, and basic navigation 8
5 - Associate the model to a stub character data 3
6 - scroll between animations, playback features (play, pause, next frame, etc) 5
7 - Code basic functionality such as load, save 3
8 - do some experiments with plugins.. the editor will need plugins to add functionality on the fly 2
9 - Collision boxes 3
10 - Hit boxes (basic stuff only) 3
11 - Direct events (stub stuff only) 2
12 - Conditional events (stub stuff only) 3

- Automated script to create and copy AssetBundles into character-editor 1
- Browse and load asset bundles from a folder near the editor executable file 2


TODO: support offline mode 2
TODO: investigate double messages on single key event?.. 1

Back to game:
1 - load character data and model 1
2 - construct character controller (basic stuff only) 2

By now, all we can see in-game is character on idle animation.
Next step: create some plugins that provide with basic functionality. Each functionality generates two plugins:
 - One for editor to show specific options and translate them into storage data
 - One for game to load specific options from storage data
There are conditional plugins and event plugins. Plan is:
1 - Create frame conditions (at frame x, do something) 2
2 - Create animation transition events for editor (at frame x, move to animation y) 2
3 - Load and play animation transitions in-game 2
If everything goes well until here, other plugins will be easy to create:
4 - Input conditions, Velocity events, Velocity conditions, etc (check old GameEntityController) 5
5 - Create a test character with simple movement: walk, jump, fall 3

By now, in-game character should be able to walk, jump, fall.
Basic stuff is done.

TODO: need to detail next things:

Next will be:
- Attack, collision & hits, energy, death (both game code, and editor code)
- Grab and release objects in anchor points

Because I'm lazy, polish comes last, or when I get bored! This is relatively simple but low priority:
- Editor camera: scroll, pan, zoom
- View anchored objects in editor

Much more in the future comes the game stuff itself:
- VS mode is the simplest, we start from here
- Simple menus and whatever
Other plans:
- enemies, AI scripts
- special backup calls (if everything goes well, this should be easy, I may do some experiments when bored)
- do an actual beat'em up level














Log

13-02-16
	- Schematic definition of character storage definition
	- Update project with latest changes from tanks & ski prototypes
	- Automatically connect to server (whatever, will be modified later anyway)
	- Investigated why not building to webGL. Reason: limited network support. Would have to refactor all network for that.
14-02-16
	- Code storage model
	- Refactor projects names
15-02-16
	- Investigate a Mac build problem
	- Added missing C# projects to git
	- Documentation: Basic projects overview
16-02-16
	- Refactor animations transitions and events (now only events and conditions)
17-02-16
	- Fixed Mac build scripts (working again)
	- Preliminar code to setup of a character from storage data
18-02-16
	- Initial thinking on editor layouts
	- Initial experiments with Unity UI
	- Figured can make a selection list using a ToggleGroup
19-02-16
	- Planned basic editor layout
20-02-16
	- Defined editor character model
21-02-16
	- Save/Load character data on editor (compiling, untested)
	- Initial rough code for character edition (selecting elements)
	- Implemented UI single selection list
22-02-16
	- AssetBundles - Wasted 2:30h: Unity using old cached bundle instead of new one
	- Asset bundles working between asset-packer and character-editor
	- Layout for bundle-model (skin) selection
23-02-16
	- Layout for open/new character
	- Layout to select anchor nodes