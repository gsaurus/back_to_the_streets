Engine documentation:
https://docs.google.com/document/d/1YAtgp1-7RQTSQqmVyXsWawJDXM8KLNKdgQm-GsvNzPs/

massive work ahead, the storage format for the characters is one, the format in the editor is other, and the in-game format is other, and I have to:
OK - define storage format 1
OK - code storage format 1
OK - refactor projects names 0.5
OK - create basic documentation about the projects 0.5
OK - refactor game format (currently transitions and events are different things, need to be the same) 2
OK - game read basic condition/events from storage format (no plugin yet) 2
OK - define the editor screens layout and functionality.. 3
OK - define editor character format 1
OK - editor read/write from/to storage format 2


Then start with the editor..
OK - study Unity UI stuff, do some experiments.. 2
OK - implement list prefab in Unity 1
OK - able to load in a 2D or 3D model, I have done a few work in the past, so 15% done.. 3
OK - Create the basic UI layouts, and basic navigation 8
OK - Associate the model to a stub character data 3
OK - scroll between animations, playback features (play, pause, next frame, etc) 5
OK - Code basic functionality such as load, save 3
-- - do some experiments with plugins.. the editor will need plugins to add functionality on the fly 2
OK - Collision boxes 3
OK - Hit boxes (basic stuff only) 3
OK - Direct events (stub stuff only) 2
OK - Conditional events (stub stuff only) 3

   - Import collision & hit boxes
   - Define and visualize models over anchors (new panel most likely)

- Automated script to create and copy AssetBundles into character-editor 1
- Browse and load asset bundles from a folder near the editor executable file 2

- check what's going on with some comboboxes not scrolling (temp solution: use keyboard up/down & space)
- Use tab/enter to move to next inputField

OK support offline mode 2
TODO: investigate double messages on single key event?.. 1
TODO: investigate is not valid. Input position is { NaN, NaN, NaN }, think reason is something's wrong with the 3D model, perhaps the anchor points exporting




[[[[[[[[[

Back to game:
OK - load character data and model 1
OK - construct character controller (basic stuff only) 2

By now, all we can see in-game is character on idle animation.
Next step: create some plugins that provide with basic functionality. Each functionality generates two plugins:
 - One for editor to show specific options and translate them into storage data
 - One for game to load specific options from storage data
There are conditional plugins and event plugins. Plan is:
OK - Create frame conditions (at frame x, do something) 2
OK - Create animation transition events for editor (at frame x, move to animation y) 2
OK - Load and play animation transitions in-game 2
If everything goes well until here, other plugins will be easy to create:
OK - Input conditions, Velocity events, Velocity conditions, etc (check old GameEntityController) 5
OK - Create a test character with simple movement: walk, jump, fall 3

By now, in-game character should be able to walk, jump, fall.
Basic stuff is done.

TODO: need to detail next things:

Next will be:
- Attack, collision & hits, energy, death (both game code, and editor code)
- Grab and release objects in anchor points

Because I'm lazy, polish comes last, or when I get bored! This is relatively simple but low priority:
- Editor camera: scroll, pan, zoom
- View anchored objects in editor

Much more in the future comes the game stuff itself:
- VS mode is the simplest, we start from here
- Simple menus and whatever
Other plans:
- enemies, AI scripts
- special backup calls (if everything goes well, this should be easy, I may do some experiments when bored)
- do an actual beat'em up level


]]]]]]]]]











Log

13-02-16
	- Schematic definition of character storage definition
	- Update project with latest changes from tanks & ski prototypes
	- Automatically connect to server (whatever, will be modified later anyway)
	- Investigated why not building to webGL. Reason: limited network support. Would have to refactor all network for that.
14-02-16
	- Code storage model
	- Refactor projects names
15-02-16
	- Investigate a Mac build problem
	- Added missing C# projects to git
	- Documentation: Basic projects overview
16-02-16
	- Refactor animations transitions and events (now only events and conditions)
17-02-16
	- Fixed Mac build scripts (working again)
	- Preliminar code to setup of a character from storage data
18-02-16
	- Initial thinking on editor layouts
	- Initial experiments with Unity UI
	- Figured can make a selection list using a ToggleGroup
19-02-16
	- Planned basic editor layout
20-02-16
	- Defined editor character model
21-02-16
	- Save/Load character data on editor (compiling, untested)
	- Initial rough code for character edition (selecting elements)
	- Implemented UI single selection list
22-02-16
	- AssetBundles - Wasted 2:30h: Unity using old cached bundle instead of new one
	- Asset bundles working between asset-packer and character-editor
	- Layout for bundle-model (skin) selectiono s
23-02-16
	- Layout for open/new character
	- Layout to select anchor nodes
24-02-16
	- Layout for events editor
25-02-16
	- Layout for collisions panel
26-02-16
	- Layout for hits panel (attack)
	- Layout for events
	- Layout for attachment tests (stub)
	- Layout for animation playback
27-02-16
	- Layout for all events management
	- CharacterEditor: events centralisation, load / save / create character, load skin
	- Coded most of Open / Create character panel
28-02-16
	- Coded skins selector panel
	- Coded Character panel
	- Coded Anchors panel
29-02-16
	- Added save / open buttons
	- Added animations dropdown to navigate through animations
01-03-16
	- Fixed animation durations
02-03-16
	- Bugfixing (problems related with loading different chars, events order, etc)
03-03-16
	- Coded Box sub panel
	- Started coding Collisions panel
04-03-16
	- Collisions panel finished
	- Copy box from one frame into others
05-03-16
	- Collision and Hit boxes visualisation
	- Coded HitBoxes, except type & parameter
06-03-16
	- Created generic param UI prefabs
	- Hits generic parameters fully functional
	- Rearranged hit panel elements, more crowded but less confusing
	- Coded Events Panel
	- Coded Events Editor
	- Started All Events panel
07-03-16
	- Completed All Events panel
08-03-16
	- Prepared model with boxes for auto-import
09-03-16
	- Coded good part of auto-import, then decided to take it off
	- Simplified open panel, no more auto-import
	- Decided to not include attachments on this phase (they won't be exported with the prefabs)
10-03-16
	- Studied UFE (Universal Fighting Engine)
	- Started defining basic conditions and it's loading from the storage data
11-03-16
	- Game: All basic conditions and events
	- Editor: All basic conditions
	- Editor: All basic events
12-03-16
	- Able to load character in game
	- All conditions and events working in-game
13-03-16
	- Fixed demo character to make sure there was no bugs with the events system
14-03-16
	- Checked old prototype to have an idea about hits
	- Rough plan for the next works
15-03-16
	- PointModel with flag to enable / disable physics calculations
16..20-03-16
	:( no work done :(
21-03-16
	- Load "frame data" from storage (collision and hits, not storing it on controller yet)
22..24-03-16
	:( no work done :(
25-03-16
	- Support offline mode
	
	
	
OK - PointModel with flag to enable / disable physics calculations (to disable during hit pause)	1
OK - Precompute collisions bounding boxes 1
OK - Precompute hits bounding boxes 1
OK - Define teams of entities (buckets), and their kind of interaction ([x]hit, [x]collision) to check collisions between relevant teams only 2
5 - Hits detection: loop through the teams to detect hit VS collision (Debug.Log will do for now) 3
6 - New type of conditional events: on hit - not tested every frame, triggered by hit detection (beware of conflict with frame based events) 2
7 - Animation pause delay (built-in support) 1
8 - General variable arrays (precomputed size), and automatic countdown counters array (to be used as energy, combo counter & timers, etc) 1
9 - Conditions & events for general variables 3
10 - Test character with simple combo and combo time cancel 2
11 - Collision VS Collision physics 3

TODO: which collision box (ID) was I hit at?
TODO: one hit per animation (no multihit, thank you)